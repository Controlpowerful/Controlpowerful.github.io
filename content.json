{"pages":[],"posts":[{"title":"Python数据类型","text":"找补找补 IntPython作为动态语言可以直接定义variable,Python中万物都是variable 123a = 10b = 3.14c = 999999999999999 Stringsting —&gt; 字符串,在python中有多种方式声名字符串 ‘ ‘ 单引号 “ “ 双引号 ‘’’ ‘’’ 三个引号开始,三个引号结束,表示多行内容 r ‘ ‘ 引号前面加r表示引号里面的内容不转义 \\ 转义字符 12345678910111213word = 'hello world'name = \"Ben\"date = \"2020\\\"7.16\"print(date)line = '''line1line2line3'''print(line)example = 'hello \\n world'print(example) 字符串可以进行编码,解码操作 encode() Text —&gt; bytes decode() bytes —&gt; Text Bool布尔值 True False 真假 or 只要一个为True就为真 and 必须所有的条件都为True才为真,否则为False not 取反 123print(True or False) # Falseprint(True and False) # Falseprint(not 9&gt;3) # False NoneNone是个特殊的空值,它并不是0 List列表一种有序集合,可随时添加删除角色 12345678910111213141516171819202122232425262728293031323334353637383940teacher = ['John','Ben',1000]print(teacher)print(len(teacher))# list第一位的索引是`0`,`-1`是倒数第一位word = ['today','job','sister'] print(word[0]) # todayprint(word[2]) # sisterprint(word[-1]) # sisterprin(word([-3])) # today# append()将数据追加到末尾app = ['douyin','kuaisho']app.append('huoshan')print(app)# insert()将数据添加到对应元素app.insert(0,'weishi') print(app)# pop()删除对应元素math = [100,1000,200,20000]math.pop(0)print(math)# 替换指定元素L = ['gun','sos','beach']L[2] = 'fuck'print(L)# 二维数组p = ['asp','php']s = ['python','java',p,'scheme']print(len(s))print(s[2][1]) # php# 多维数组修改元素eg = ['hello','hoi',[1,2],3]eg[2].insert(0,'good')print(eg) Tuple元组 tuple只能读取不能修改 12345678exam = ('math','english')print(exam[0])# 定义一个空tupled = ()# 定义一个元素的tuplet = (1,) # `()`是小括号,为了不产生歧义一个元素的tuple后必须加上`,` Dict字典 一个Key对应一个Value 123456789# dict.['Key']dictionary = {'America':'fuck you','China':'very good','age':18}# 判断Key是否在dict里 ---&gt; Key in dictprint('America' in dictionary)# 删除一个key dictionary.pop('age')print(dictionary) Set集合 12345678910111213s = set([1,2,3])print(type(s))print(s)# add() 追加元素到末尾,重复添加元素不变s.add(4)print(s)s.add(4)print(s)# remove() 删除一个元素s.remove(4)print(s) End int 十进制整数 string 字符串:单引号,双引号,''' ''' list 多个数据类型的列表:append()追加一个元素 insert()指定索引位置添加元素 pop()删除一个元素 tuple 元组,定义一个元素的tuple要在后面加上, dict 字典:pop()删除一个Key set 集合","link":"/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"Git基操","text":"熟悉Git的基本操作! 暂存区上篇文章讲到暂存区是版本库下的index文件,它是用来存储临时提交文件的,那怎么提交呢??? 1git add readme 上面的命令会把readme文件提交到暂存区存放,这时候你会发现终端的shell出现了变化(其实是一个提示) 该命令把工作区readme提交到了暂存区 检查状态git status检查提交文件的状态 1git status Look,git给了我们个提示 询问我们是否要提交,同时也给了我们方案告诉我们把文件丢出去的指令 git status指令只要你在工作区对文件进行任意修改,就可以查看当前状态 本地版本库上面图片中看到git询问我们是否要提交,提交只需要一条非常简单的命令就可以 1git commit -m &quot;message&quot; commit命令会把存放在暂存区的文件上传到本地版本库,注意是本地版本库 提交完成后,发现上面的X已经消失了,再次git status也没有回显,证明我们的提交成功了! wait,wait,你之前不是说什么master什么的,到底是个什么东西啊?? 历史查看git之所以这么强大点就在于它是分布管理 我们刚才所提交的只不过是在我们本地操作,他的流程是这样的 工作区 —–&gt; git add . ——&gt; 暂存区 暂存区 —–&gt; git commit -m “message” ——&gt; 本地版本库 当我们在创建版本库时,git自动帮我们创建了一个分支master,git commit就是往master分支做出提交 So,让我们看看到底什么是分支和master 既然是分支那就有很多东西在下面,git log查看所有commit过的提交历史,并且是从新到旧的形式排列的. 1git log HEAD指针两张图片都出现了HEAD,世界上绝对不会有一样东西偶然出现2次 HEAD是一个指针,负责指向分支的指针,你在哪HEAD就指向哪;后面写分支的时候在仔细描述HEAD,他就是指哪打哪没啥好说的~ 版本回调在上面我们对readme文件进行了提交,我们现在要对其进行修改再次提交 change: 12This is a exampleMy name is Zhouenlai 再次提交: 12git add .git commit -m \"change\" git log查看下提交记录 问题出现了,刚才发呆把不该发送的信息提交了出去! 不慌,版本回调是git的一个特点,它允许你犯错! 12345git reset --hard HEAD^ # 回到当前版本的上一个版本or:git reset --hard HEAD~1 好的,奇迹出现了错误不见了,HEAD重新指向了第一次提交 —–&gt; first hold on! 我现在就要回到刚才那个版本,现在没了,你把他删除了! no,我并没有把change删除它只不过暂时消失了 1git reflog # 查看操作记录 我反正是看到了change的哈希,reset回去即可 1git reset --hard hash git log发现已经回到刚才的版本! (文件也同样回调) git diff最后一个小技巧 —–&gt; git diff file 查看文件修改差异 注意:git diff只能在工作区下查看 eg: 1My name is Liuli!","link":"/Git%E5%9F%BA%E6%93%8D/"},{"title":"Git基本认知","text":"杨帆,启航! Git基操2020年,你可以不会任何一门编程语言但是请一定熟练的掌握Git的操作;因为它真的是太强大方便了~ Linux下默认是预装好了Git的,So let’s do this. 创建工作区Git的工作区呢,说白了就是我们的一个目录,所以创建一个工作区就直接mkdir new folder. 1mkdir learngit 暂存区在说明暂存区之前,先来生成一个git仓库 1git init git init 会初始化创建一个仓库 —&gt; .git 好的,让我们来介绍下暂存区吧,顾名思义它是一个暂时存储的地方是临时的,在.git下的index文件就是暂存区域也被称之为 —&gt; stage 版本库.git文件就是一个版本库,但它被称为本地版本库 版本库分为两个部分 stage (index) master 其中stage是暂存区,master是一个分支,它是在我们创建版本库时自动生成的 让我们来整理下毕竟初学者 like me一样会双眼发直 工作区就是一个目录 git init 在工作区里面创建一个名为.git的本地版本库 暂存区其实是.git下叫做index的文件,被称为stage(index) master是在版本库创建自动生成的,它是一个分支","link":"/Git%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Git","slug":"Git","link":"/tags/Git/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Git","slug":"Git","link":"/categories/Git/"}]}